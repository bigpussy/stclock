typedef unsigned char      uint8;          // 无符号8位整型变量 //
#define		LCM2402_DB0_DB7		P0			// 定义LCM2402的数据总线
sbit LCM2402_RS   = P0 ^ 0;					// 定义LCM2402的RS控制线
sbit LCM2402_RW   = P0 ^ 1;					// 定义LCM2402的RW控制线
sbit LCM2402_E    = P0 ^ 2;					// 定义LCM2402的E控制线
sbit LCM2402_Busy = P0 ^ 7;					// 定义LCM2402的测忙线（与LCM2402_DB0_DB7关联）

sbit BLACK = P1 ^ 3;                // 定义LCM2402的偏压控制线
sbit BACK = P2 ^ 7;                 // 定义LCM2402的背光控制线

/********************************************************************************************
// 定义LCM2402指令集 // （详细请见技术手册）
/********************************************************************************************/
#define			CMD_clear		0x01             // 清除屏幕
#define			CMD_back		0x02             // DDRAM回零位
#define			CMD_dec1		0x04             // 读入后AC（指针）减1，向左写
#define			CMD_add1		0x06             // 读入后AC（指针）加1，向右写
#define			CMD_dis_gb1		0x0f             // 开显示_开光标_开光标闪烁
#define			CMD_dis_gb2		0x0e             // 开显示_开光标_关光标闪烁
#define			CMD_dis_gb3		0x0c             // 开显示_关光标_关光标闪烁
#define			CMD_OFF_dis		0x08             // 关显示_关光标_关光标闪烁
#define			CMD_set82		0x38             // 8位总线_2行显示
#define			CMD_set81		0x30             // 8位总线_1行显示（上边行）
#define			CMD_set42		0x28             // 4位总线_2行显示
#define			CMD_set41		0x20             // 4位总线_1行显示（上边行）
#define			lin_1			0x80             // 4位总线_1行显示（上边行）
#define			lin_2			0xc0             // 4位总线_1行显示（上边行）

/********************************************************************************************
// 读LCM忙程序 [底层协议] // （所有底层协议都无需关注）
// LCM2402测忙，若LCM2402处于忙状态，本函数将等待至非忙状态 //
/********************************************************************************************/
void LCM2402_TestBusy(void){
   	LCM2402_DB0_DB7 = 0xf0 | LCM2402_DB0_DB7;		//设备读状态
   	LCM2402_RS = 0;
   	LCM2402_RW = 1;
   	LCM2402_E = 1;
   	while(LCM2402_Busy);		//等待LCM不忙
   	LCM2402_E = 0;				//
}
/********************************************************************************************
// 写指令程序 //
// 向LCM2402写命令 本函数需要1个指令集的入口参数 //
/********************************************************************************************/
void LCM2402_WriteCMD(uint8 LCM2402_command) { 
  	LCM2402_TestBusy();
		LCM2402_RS = 0;
  	LCM2402_RW = 0;  	
  	LCM2402_DB0_DB7 = (LCM2402_command / 16) * 16 | LCM2402_DB0_DB7 % 16;		//4位数据线
  	LCM2402_E = 1;		
  	LCM2402_E = 0;
		LCM2402_DB0_DB7 = (LCM2402_command % 16) * 16 | LCM2402_DB0_DB7 % 16;
  	LCM2402_E = 1;		
  	LCM2402_E = 0;
}
/********************************************************************************************
// 写数据程序 //
// 向LCM2402写数据 //
/********************************************************************************************/
void LCM2402_WriteData(uint8 LCM2402_data){ 
    LCM2402_TestBusy();
		LCM2402_RS = 1;
  	LCM2402_RW = 0;
		LCM2402_DB0_DB7 = (LCM2402_data / 16) * 16 | LCM2402_DB0_DB7 % 16;  	
  	LCM2402_E = 1;		
  	LCM2402_E = 0;
		LCM2402_DB0_DB7 = (LCM2402_data % 16) * 16 | LCM2402_DB0_DB7 % 16;  	
  	LCM2402_E = 1;
  	LCM2402_E = 0;
}
/********************************************************************************************
// 打印字符串程序 // （本函数调用指针函数）
// 向LCM发送一个字符串,长度48字符之内 
// 第一行位置 0x00~0x17  第二行位置 0x40~0x57 
// 应用举例：print(0x80,"doyoung.net"); //在第一行第一位处从左向右打印doyoung.net字符串
/********************************************************************************************/
void print(uint8 a,uint8 *str){
	LCM2402_WriteCMD(a | 0x80);
	while(*str != '\0'){
		LCM2402_WriteData(*str++);
	}
	*str = 0;
}
/********************************************************************************************
// 打印单字符程序 // 
// 第一行位置 0x00~0x17  第二行位置 0x40~0x57 
// 向LCM发送一个字符,以十六进制（0x00）表示 
// 应用举例：print(0xc0,0x30); //在第二行第一位处打印字符“0”
/********************************************************************************************/
void print2(uint8 a,uint8 t){
		LCM2402_WriteCMD(a | 0x80);
		LCM2402_WriteData(t);
}
/********************************************************************************************
// 定义小汉字 //
// 可写入8个自字义字符，写入后可用其CGRAM代码直接提取显示。
// 字符定义方法请参考技术手册 
/********************************************************************************************/
uint8 code Xword[]={
    0x18,0x18,0x07,0x08,0x08,0x08,0x07,0x00,        //℃，代码 0x00
    0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,        //一，代码 0x01
    0x00,0x00,0x00,0x0e,0x00,0xff,0x00,0x00,        //二，代码 0x02
    0x00,0x00,0xff,0x00,0x0e,0x00,0xff,0x00,        //三，代码 0x03
    0x00,0x00,0xff,0xf5,0xfb,0xf1,0xff,0x00,        //四，代码 0x04
    0x00,0xfe,0x08,0xfe,0x0a,0x0a,0xff,0x00,        //五，代码 0x05
    0x00,0x04,0x00,0xff,0x00,0x0a,0x11,0x00,        //六，代码 0x06
    0x00,0x1f,0x11,0x1f,0x11,0x11,0x1f,0x00,        //日，代码 0x07
};
void CgramWrite(void) {	// 装入CGRAM //
    uint8 i;
	LCM2402_WriteCMD(0x06);			// CGRAM地址自动加1
	LCM2402_WriteCMD(0x40);			// CGRAM地址设为00处
    for(i=0;i<64;i++) {
    	LCM2402_WriteData(Xword[i]);// 按数组写入数据
    }
}

/********************************************************************************************
// LCM2402初始化 //（使用者可自定义，加 * 号程序行必须保留但可修改）
/********************************************************************************************/
void LCM2402_Init(void){
LCM2402_WriteCMD(CMD_set42);	
  	LCM2402_WriteCMD(CMD_set42);	//* 显示模式设置：显示2行，每个字符为5*7个像素
  	LCM2402_WriteCMD(CMD_clear);	//  显示清屏
  	LCM2402_WriteCMD(CMD_back);		//* 数据指针指向第1行第1个字符位置
  	LCM2402_WriteCMD(CMD_add1);		//  显示光标移动设置：文字不动，光标右移
  	LCM2402_WriteCMD(CMD_dis_gb3); 	//  显示开及光标设置：显示开，光标开，闪烁开
	CgramWrite();					//  向CGRAM写入自定义字符
}
/********************************************************************************************/
//			以上是LCM2402驱动程序			//
/*********************************************************************************************/
